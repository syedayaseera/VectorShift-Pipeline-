{"ast":null,"code":"var _jsxFileName = \"/Users/syeda/Desktop/untitled folder/VectorShift-Pipeline-/frontend/src/nodes/transformerNode.js\",\n  _s = $RefreshSig$();\n// transformerNode.js - Data transformation node\n\nimport { useState } from 'react';\nimport { Position } from 'reactflow';\nimport { BaseNode, createHandle, InputField } from './BaseNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransformerNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const [transformType, setTransformType] = useState((data === null || data === void 0 ? void 0 : data.transformType) || 'uppercase');\n  const [customPattern, setCustomPattern] = useState((data === null || data === void 0 ? void 0 : data.customPattern) || '');\n  const handles = [createHandle('target', Position.Left, `${id}-input`), createHandle('source', Position.Right, `${id}-output`)];\n  const transformOptions = [{\n    value: 'uppercase',\n    label: 'Uppercase'\n  }, {\n    value: 'lowercase',\n    label: 'Lowercase'\n  }, {\n    value: 'titlecase',\n    label: 'Title Case'\n  }, {\n    value: 'reverse',\n    label: 'Reverse'\n  }, {\n    value: 'trim',\n    label: 'Trim'\n  }, {\n    value: 'custom',\n    label: 'Custom Pattern'\n  }];\n  return /*#__PURE__*/_jsxDEV(BaseNode, {\n    id: id,\n    data: data,\n    title: \"Transformer\",\n    handles: handles,\n    style: {\n      backgroundColor: '#fff8e8'\n    },\n    children: [/*#__PURE__*/_jsxDEV(InputField, {\n      label: \"Transform Type\",\n      value: transformType,\n      onChange: e => setTransformType(e.target.value),\n      options: transformOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), transformType === 'custom' && /*#__PURE__*/_jsxDEV(InputField, {\n      label: \"Custom Pattern\",\n      value: customPattern,\n      onChange: e => setCustomPattern(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(TransformerNode, \"VJ69zpy807TKzh9KJrzlUAtUIUI=\");\n_c = TransformerNode;\nvar _c;\n$RefreshReg$(_c, \"TransformerNode\");","map":{"version":3,"names":["useState","Position","BaseNode","createHandle","InputField","jsxDEV","_jsxDEV","TransformerNode","id","data","_s","transformType","setTransformType","customPattern","setCustomPattern","handles","Left","Right","transformOptions","value","label","title","style","backgroundColor","children","onChange","e","target","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/syeda/Desktop/untitled folder/VectorShift-Pipeline-/frontend/src/nodes/transformerNode.js"],"sourcesContent":["// transformerNode.js - Data transformation node\n\nimport { useState } from 'react';\nimport { Position } from 'reactflow';\nimport { BaseNode, createHandle, InputField } from './BaseNode';\n\nexport const TransformerNode = ({ id, data }) => {\n  const [transformType, setTransformType] = useState(data?.transformType || 'uppercase');\n  const [customPattern, setCustomPattern] = useState(data?.customPattern || '');\n\n  const handles = [\n    createHandle('target', Position.Left, `${id}-input`),\n    createHandle('source', Position.Right, `${id}-output`)\n  ];\n\n  const transformOptions = [\n    { value: 'uppercase', label: 'Uppercase' },\n    { value: 'lowercase', label: 'Lowercase' },\n    { value: 'titlecase', label: 'Title Case' },\n    { value: 'reverse', label: 'Reverse' },\n    { value: 'trim', label: 'Trim' },\n    { value: 'custom', label: 'Custom Pattern' }\n  ];\n\n  return (\n    <BaseNode \n      id={id} \n      data={data} \n      title=\"Transformer\" \n      handles={handles}\n      style={{ backgroundColor: '#fff8e8' }}\n    >\n      <InputField \n        label=\"Transform Type\" \n        value={transformType} \n        onChange={(e) => setTransformType(e.target.value)} \n        options={transformOptions}\n      />\n      {transformType === 'custom' && (\n        <InputField \n          label=\"Custom Pattern\" \n          value={customPattern} \n          onChange={(e) => setCustomPattern(e.target.value)} \n        />\n      )}\n    </BaseNode>\n  );\n}\n"],"mappings":";;AAAA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,QAAQ,QAAQ,WAAW;AACpC,SAASC,QAAQ,EAAEC,YAAY,EAAEC,UAAU,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,OAAO,MAAMC,eAAe,GAAGA,CAAC;EAAEC,EAAE;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,CAAAS,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,aAAa,KAAI,WAAW,CAAC;EACtF,MAAM,CAACE,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,CAAAS,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,aAAa,KAAI,EAAE,CAAC;EAE7E,MAAME,OAAO,GAAG,CACdZ,YAAY,CAAC,QAAQ,EAAEF,QAAQ,CAACe,IAAI,EAAG,GAAER,EAAG,QAAO,CAAC,EACpDL,YAAY,CAAC,QAAQ,EAAEF,QAAQ,CAACgB,KAAK,EAAG,GAAET,EAAG,SAAQ,CAAC,CACvD;EAED,MAAMU,gBAAgB,GAAG,CACvB;IAAEC,KAAK,EAAE,WAAW;IAAEC,KAAK,EAAE;EAAY,CAAC,EAC1C;IAAED,KAAK,EAAE,WAAW;IAAEC,KAAK,EAAE;EAAY,CAAC,EAC1C;IAAED,KAAK,EAAE,WAAW;IAAEC,KAAK,EAAE;EAAa,CAAC,EAC3C;IAAED,KAAK,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAU,CAAC,EACtC;IAAED,KAAK,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAO,CAAC,EAChC;IAAED,KAAK,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAiB,CAAC,CAC7C;EAED,oBACEd,OAAA,CAACJ,QAAQ;IACPM,EAAE,EAAEA,EAAG;IACPC,IAAI,EAAEA,IAAK;IACXY,KAAK,EAAC,aAAa;IACnBN,OAAO,EAAEA,OAAQ;IACjBO,KAAK,EAAE;MAAEC,eAAe,EAAE;IAAU,CAAE;IAAAC,QAAA,gBAEtClB,OAAA,CAACF,UAAU;MACTgB,KAAK,EAAC,gBAAgB;MACtBD,KAAK,EAAER,aAAc;MACrBc,QAAQ,EAAGC,CAAC,IAAKd,gBAAgB,CAACc,CAAC,CAACC,MAAM,CAACR,KAAK,CAAE;MAClDS,OAAO,EAAEV;IAAiB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,EACDrB,aAAa,KAAK,QAAQ,iBACzBL,OAAA,CAACF,UAAU;MACTgB,KAAK,EAAC,gBAAgB;MACtBD,KAAK,EAAEN,aAAc;MACrBY,QAAQ,EAAGC,CAAC,IAAKZ,gBAAgB,CAACY,CAAC,CAACC,MAAM,CAACR,KAAK;IAAE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEf,CAAC;AAAAtB,EAAA,CAzCYH,eAAe;AAAA0B,EAAA,GAAf1B,eAAe;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}