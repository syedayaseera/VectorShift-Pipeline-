{"ast":null,"code":"var _jsxFileName = \"/Users/syeda/Desktop/untitled folder/VectorShift-Pipeline-/frontend/src/nodes/conditionNode.js\",\n  _s = $RefreshSig$();\n// conditionNode.js - Conditional logic node\n\nimport { useState } from 'react';\nimport { Position } from 'reactflow';\nimport { BaseNode, createHandle, InputField } from './BaseNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ConditionNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const [condition, setCondition] = useState((data === null || data === void 0 ? void 0 : data.condition) || 'equals');\n  const [value, setValue] = useState((data === null || data === void 0 ? void 0 : data.value) || '');\n  const [trueLabel, setTrueLabel] = useState((data === null || data === void 0 ? void 0 : data.trueLabel) || 'True');\n  const [falseLabel, setFalseLabel] = useState((data === null || data === void 0 ? void 0 : data.falseLabel) || 'False');\n  const handles = [createHandle('target', Position.Left, `${id}-input`), createHandle('source', Position.Right, `${id}-true`), createHandle('source', Position.Right, `${id}-false`, {\n    top: '70%'\n  })];\n  const conditionOptions = [{\n    value: 'equals',\n    label: 'Equals'\n  }, {\n    value: 'notEquals',\n    label: 'Not Equals'\n  }, {\n    value: 'greaterThan',\n    label: 'Greater Than'\n  }, {\n    value: 'lessThan',\n    label: 'Less Than'\n  }, {\n    value: 'contains',\n    label: 'Contains'\n  }, {\n    value: 'isEmpty',\n    label: 'Is Empty'\n  }];\n  return /*#__PURE__*/_jsxDEV(BaseNode, {\n    id: id,\n    data: data,\n    title: \"Condition\",\n    handles: handles,\n    style: {\n      backgroundColor: '#f8e8f0'\n    },\n    children: [/*#__PURE__*/_jsxDEV(InputField, {\n      label: \"Condition\",\n      value: condition,\n      onChange: e => setCondition(e.target.value),\n      options: conditionOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), condition !== 'isEmpty' && /*#__PURE__*/_jsxDEV(InputField, {\n      label: \"Value\",\n      value: value,\n      onChange: e => setValue(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(InputField, {\n      label: \"True Label\",\n      value: trueLabel,\n      onChange: e => setTrueLabel(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputField, {\n      label: \"False Label\",\n      value: falseLabel,\n      onChange: e => setFalseLabel(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(ConditionNode, \"nbd4B2ZYNwWZY9ureR/FxyUPlrE=\");\n_c = ConditionNode;\nvar _c;\n$RefreshReg$(_c, \"ConditionNode\");","map":{"version":3,"names":["useState","Position","BaseNode","createHandle","InputField","jsxDEV","_jsxDEV","ConditionNode","id","data","_s","condition","setCondition","value","setValue","trueLabel","setTrueLabel","falseLabel","setFalseLabel","handles","Left","Right","top","conditionOptions","label","title","style","backgroundColor","children","onChange","e","target","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/syeda/Desktop/untitled folder/VectorShift-Pipeline-/frontend/src/nodes/conditionNode.js"],"sourcesContent":["// conditionNode.js - Conditional logic node\n\nimport { useState } from 'react';\nimport { Position } from 'reactflow';\nimport { BaseNode, createHandle, InputField } from './BaseNode';\n\nexport const ConditionNode = ({ id, data }) => {\n  const [condition, setCondition] = useState(data?.condition || 'equals');\n  const [value, setValue] = useState(data?.value || '');\n  const [trueLabel, setTrueLabel] = useState(data?.trueLabel || 'True');\n  const [falseLabel, setFalseLabel] = useState(data?.falseLabel || 'False');\n\n  const handles = [\n    createHandle('target', Position.Left, `${id}-input`),\n    createHandle('source', Position.Right, `${id}-true`),\n    createHandle('source', Position.Right, `${id}-false`, { top: '70%' })\n  ];\n\n  const conditionOptions = [\n    { value: 'equals', label: 'Equals' },\n    { value: 'notEquals', label: 'Not Equals' },\n    { value: 'greaterThan', label: 'Greater Than' },\n    { value: 'lessThan', label: 'Less Than' },\n    { value: 'contains', label: 'Contains' },\n    { value: 'isEmpty', label: 'Is Empty' }\n  ];\n\n  return (\n    <BaseNode \n      id={id} \n      data={data} \n      title=\"Condition\" \n      handles={handles}\n      style={{ backgroundColor: '#f8e8f0' }}\n    >\n      <InputField \n        label=\"Condition\" \n        value={condition} \n        onChange={(e) => setCondition(e.target.value)} \n        options={conditionOptions}\n      />\n      {condition !== 'isEmpty' && (\n        <InputField \n          label=\"Value\" \n          value={value} \n          onChange={(e) => setValue(e.target.value)} \n        />\n      )}\n      <InputField \n        label=\"True Label\" \n        value={trueLabel} \n        onChange={(e) => setTrueLabel(e.target.value)} \n      />\n      <InputField \n        label=\"False Label\" \n        value={falseLabel} \n        onChange={(e) => setFalseLabel(e.target.value)} \n      />\n    </BaseNode>\n  );\n}\n"],"mappings":";;AAAA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,QAAQ,QAAQ,WAAW;AACpC,SAASC,QAAQ,EAAEC,YAAY,EAAEC,UAAU,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAEC,EAAE;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,CAAAS,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,SAAS,KAAI,QAAQ,CAAC;EACvE,MAAM,CAACE,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAAS,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,KAAK,KAAI,EAAE,CAAC;EACrD,MAAM,CAACE,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,CAAAS,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEM,SAAS,KAAI,MAAM,CAAC;EACrE,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,CAAAS,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEQ,UAAU,KAAI,OAAO,CAAC;EAEzE,MAAME,OAAO,GAAG,CACdhB,YAAY,CAAC,QAAQ,EAAEF,QAAQ,CAACmB,IAAI,EAAG,GAAEZ,EAAG,QAAO,CAAC,EACpDL,YAAY,CAAC,QAAQ,EAAEF,QAAQ,CAACoB,KAAK,EAAG,GAAEb,EAAG,OAAM,CAAC,EACpDL,YAAY,CAAC,QAAQ,EAAEF,QAAQ,CAACoB,KAAK,EAAG,GAAEb,EAAG,QAAO,EAAE;IAAEc,GAAG,EAAE;EAAM,CAAC,CAAC,CACtE;EAED,MAAMC,gBAAgB,GAAG,CACvB;IAAEV,KAAK,EAAE,QAAQ;IAAEW,KAAK,EAAE;EAAS,CAAC,EACpC;IAAEX,KAAK,EAAE,WAAW;IAAEW,KAAK,EAAE;EAAa,CAAC,EAC3C;IAAEX,KAAK,EAAE,aAAa;IAAEW,KAAK,EAAE;EAAe,CAAC,EAC/C;IAAEX,KAAK,EAAE,UAAU;IAAEW,KAAK,EAAE;EAAY,CAAC,EACzC;IAAEX,KAAK,EAAE,UAAU;IAAEW,KAAK,EAAE;EAAW,CAAC,EACxC;IAAEX,KAAK,EAAE,SAAS;IAAEW,KAAK,EAAE;EAAW,CAAC,CACxC;EAED,oBACElB,OAAA,CAACJ,QAAQ;IACPM,EAAE,EAAEA,EAAG;IACPC,IAAI,EAAEA,IAAK;IACXgB,KAAK,EAAC,WAAW;IACjBN,OAAO,EAAEA,OAAQ;IACjBO,KAAK,EAAE;MAAEC,eAAe,EAAE;IAAU,CAAE;IAAAC,QAAA,gBAEtCtB,OAAA,CAACF,UAAU;MACToB,KAAK,EAAC,WAAW;MACjBX,KAAK,EAAEF,SAAU;MACjBkB,QAAQ,EAAGC,CAAC,IAAKlB,YAAY,CAACkB,CAAC,CAACC,MAAM,CAAClB,KAAK,CAAE;MAC9CmB,OAAO,EAAET;IAAiB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,EACDzB,SAAS,KAAK,SAAS,iBACtBL,OAAA,CAACF,UAAU;MACToB,KAAK,EAAC,OAAO;MACbX,KAAK,EAAEA,KAAM;MACbgB,QAAQ,EAAGC,CAAC,IAAKhB,QAAQ,CAACgB,CAAC,CAACC,MAAM,CAAClB,KAAK;IAAE;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CACF,eACD9B,OAAA,CAACF,UAAU;MACToB,KAAK,EAAC,YAAY;MAClBX,KAAK,EAAEE,SAAU;MACjBc,QAAQ,EAAGC,CAAC,IAAKd,YAAY,CAACc,CAAC,CAACC,MAAM,CAAClB,KAAK;IAAE;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eACF9B,OAAA,CAACF,UAAU;MACToB,KAAK,EAAC,aAAa;MACnBX,KAAK,EAAEI,UAAW;MAClBY,QAAQ,EAAGC,CAAC,IAAKZ,aAAa,CAACY,CAAC,CAACC,MAAM,CAAClB,KAAK;IAAE;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAEf,CAAC;AAAA1B,EAAA,CAtDYH,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}