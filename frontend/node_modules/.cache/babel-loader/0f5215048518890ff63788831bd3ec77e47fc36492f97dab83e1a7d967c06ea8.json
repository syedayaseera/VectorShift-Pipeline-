{"ast":null,"code":"var _jsxFileName = \"/Users/syeda/Desktop/untitled folder/VectorShift-Pipeline-/frontend/src/nodes/textNode.js\",\n  _s = $RefreshSig$();\n// textNode.js\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { Position } from 'reactflow';\nimport { BaseNode, createHandle, InputField } from './BaseNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TextNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const [currText, setCurrText] = useState((data === null || data === void 0 ? void 0 : data.text) || '{{input}}');\n\n  // Parse variables from text input\n  const variables = useMemo(() => {\n    const variableRegex = /\\{\\{\\s*([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\}\\}/g;\n    const matches = [];\n    let match;\n    while ((match = variableRegex.exec(currText)) !== null) {\n      const variableName = match[1];\n      if (!matches.includes(variableName)) {\n        matches.push(variableName);\n      }\n    }\n    return matches;\n  }, [currText]);\n\n  // Create handles based on variables\n  const handles = useMemo(() => {\n    const sourceHandles = [createHandle('source', Position.Right, `${id}-output`)];\n    const inputHandles = variables.map((variable, index) => createHandle('target', Position.Left, `${id}-${variable}`, {\n      top: `${20 + index * 25}%`\n    }));\n    return [...inputHandles, ...sourceHandles];\n  }, [id, variables]);\n\n  // Calculate dynamic dimensions based on text content\n  const nodeDimensions = useMemo(() => {\n    const lines = currText.split('\\n').length;\n    const maxLineLength = Math.max(...currText.split('\\n').map(line => line.length));\n\n    // Base dimensions\n    const baseWidth = 240;\n    const baseHeight = 120;\n\n    // Calculate width based on content (minimum 240px, maximum 400px)\n    const calculatedWidth = Math.max(baseWidth, Math.min(400, maxLineLength * 8 + 40));\n\n    // Calculate height based on lines (minimum 120px, maximum 300px)\n    const calculatedHeight = Math.max(baseHeight, Math.min(300, lines * 20 + 80));\n    return {\n      width: calculatedWidth,\n      height: calculatedHeight\n    };\n  }, [currText]);\n\n  // Update node data when text changes\n  useEffect(() => {\n    if (data && data.onTextChange) {\n      data.onTextChange(currText);\n    }\n  }, [currText, data]);\n  return /*#__PURE__*/_jsxDEV(BaseNode, {\n    id: id,\n    data: data,\n    title: \"Text\",\n    handles: handles,\n    style: {\n      width: nodeDimensions.width,\n      height: nodeDimensions.height,\n      backgroundColor: '#f8fafc',\n      border: '2px solid var(--gray-300)',\n      transition: 'all var(--transition-normal)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 'var(--space-2)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputField, {\n        label: \"Text Template\",\n        value: currText,\n        onChange: e => setCurrText(e.target.value),\n        placeholder: \"Enter text with {{ variables }}\",\n        multiline: true,\n        rows: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), variables.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 'var(--space-2)',\n          background: 'var(--primary-50)',\n          borderRadius: 'var(--radius-md)',\n          border: '1px solid var(--primary-200)',\n          fontSize: '0.75rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontWeight: '600',\n            color: 'var(--primary-700)',\n            marginBottom: 'var(--space-1)'\n          },\n          children: [\"Variables (\", variables.length, \"):\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: 'var(--space-1)'\n          },\n          children: variables.map((variable, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              padding: '2px 6px',\n              background: 'var(--primary-100)',\n              color: 'var(--primary-700)',\n              borderRadius: 'var(--radius-sm)',\n              fontSize: '0.7rem',\n              fontWeight: '500',\n              border: '1px solid var(--primary-300)'\n            },\n            children: variable\n          }, variable, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 'var(--space-2)',\n          background: 'var(--gray-50)',\n          borderRadius: 'var(--radius-md)',\n          border: '1px solid var(--gray-200)',\n          fontSize: '0.75rem',\n          color: 'var(--gray-600)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontWeight: '600',\n            marginBottom: 'var(--space-1)'\n          },\n          children: \"Preview:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontFamily: 'var(--font-mono)',\n            fontSize: '0.7rem',\n            lineHeight: '1.4'\n          },\n          children: currText || 'Enter text to see preview...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(TextNode, \"zC6FncdWJ3/dH5PXWuqGrJnTj7E=\");\n_c = TextNode;\nvar _c;\n$RefreshReg$(_c, \"TextNode\");","map":{"version":3,"names":["useState","useEffect","useMemo","Position","BaseNode","createHandle","InputField","jsxDEV","_jsxDEV","TextNode","id","data","_s","currText","setCurrText","text","variables","variableRegex","matches","match","exec","variableName","includes","push","handles","sourceHandles","Right","inputHandles","map","variable","index","Left","top","nodeDimensions","lines","split","length","maxLineLength","Math","max","line","baseWidth","baseHeight","calculatedWidth","min","calculatedHeight","width","height","onTextChange","title","style","backgroundColor","border","transition","children","display","flexDirection","gap","label","value","onChange","e","target","placeholder","multiline","rows","fileName","_jsxFileName","lineNumber","columnNumber","padding","background","borderRadius","fontSize","fontWeight","color","marginBottom","flexWrap","fontFamily","lineHeight","_c","$RefreshReg$"],"sources":["/Users/syeda/Desktop/untitled folder/VectorShift-Pipeline-/frontend/src/nodes/textNode.js"],"sourcesContent":["// textNode.js\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { Position } from 'reactflow';\nimport { BaseNode, createHandle, InputField } from './BaseNode';\n\nexport const TextNode = ({ id, data }) => {\n  const [currText, setCurrText] = useState(data?.text || '{{input}}');\n\n  // Parse variables from text input\n  const variables = useMemo(() => {\n    const variableRegex = /\\{\\{\\s*([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\}\\}/g;\n    const matches = [];\n    let match;\n    \n    while ((match = variableRegex.exec(currText)) !== null) {\n      const variableName = match[1];\n      if (!matches.includes(variableName)) {\n        matches.push(variableName);\n      }\n    }\n    \n    return matches;\n  }, [currText]);\n\n  // Create handles based on variables\n  const handles = useMemo(() => {\n    const sourceHandles = [\n      createHandle('source', Position.Right, `${id}-output`)\n    ];\n    \n    const inputHandles = variables.map((variable, index) => \n      createHandle('target', Position.Left, `${id}-${variable}`, {\n        top: `${20 + (index * 25)}%`\n      })\n    );\n    \n    return [...inputHandles, ...sourceHandles];\n  }, [id, variables]);\n\n  // Calculate dynamic dimensions based on text content\n  const nodeDimensions = useMemo(() => {\n    const lines = currText.split('\\n').length;\n    const maxLineLength = Math.max(...currText.split('\\n').map(line => line.length));\n    \n    // Base dimensions\n    const baseWidth = 240;\n    const baseHeight = 120;\n    \n    // Calculate width based on content (minimum 240px, maximum 400px)\n    const calculatedWidth = Math.max(baseWidth, Math.min(400, maxLineLength * 8 + 40));\n    \n    // Calculate height based on lines (minimum 120px, maximum 300px)\n    const calculatedHeight = Math.max(baseHeight, Math.min(300, lines * 20 + 80));\n    \n    return {\n      width: calculatedWidth,\n      height: calculatedHeight\n    };\n  }, [currText]);\n\n  // Update node data when text changes\n  useEffect(() => {\n    if (data && data.onTextChange) {\n      data.onTextChange(currText);\n    }\n  }, [currText, data]);\n\n  return (\n    <BaseNode \n      id={id} \n      data={data} \n      title=\"Text\" \n      handles={handles}\n      style={{\n        width: nodeDimensions.width,\n        height: nodeDimensions.height,\n        backgroundColor: '#f8fafc',\n        border: '2px solid var(--gray-300)',\n        transition: 'all var(--transition-normal)'\n      }}\n    >\n      <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--space-2)' }}>\n        <InputField \n          label=\"Text Template\" \n          value={currText} \n          onChange={(e) => setCurrText(e.target.value)}\n          placeholder=\"Enter text with {{ variables }}\"\n          multiline={true}\n          rows={4}\n        />\n        \n        {/* Variable indicators */}\n        {variables.length > 0 && (\n          <div style={{\n            padding: 'var(--space-2)',\n            background: 'var(--primary-50)',\n            borderRadius: 'var(--radius-md)',\n            border: '1px solid var(--primary-200)',\n            fontSize: '0.75rem'\n          }}>\n            <div style={{ \n              fontWeight: '600', \n              color: 'var(--primary-700)',\n              marginBottom: 'var(--space-1)'\n            }}>\n              Variables ({variables.length}):\n            </div>\n            <div style={{ \n              display: 'flex', \n              flexWrap: 'wrap', \n              gap: 'var(--space-1)' \n            }}>\n              {variables.map((variable, index) => (\n                <span \n                  key={variable}\n                  style={{\n                    padding: '2px 6px',\n                    background: 'var(--primary-100)',\n                    color: 'var(--primary-700)',\n                    borderRadius: 'var(--radius-sm)',\n                    fontSize: '0.7rem',\n                    fontWeight: '500',\n                    border: '1px solid var(--primary-300)'\n                  }}\n                >\n                  {variable}\n                </span>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        {/* Preview of parsed text */}\n        <div style={{\n          padding: 'var(--space-2)',\n          background: 'var(--gray-50)',\n          borderRadius: 'var(--radius-md)',\n          border: '1px solid var(--gray-200)',\n          fontSize: '0.75rem',\n          color: 'var(--gray-600)'\n        }}>\n          <div style={{ fontWeight: '600', marginBottom: 'var(--space-1)' }}>\n            Preview:\n          </div>\n          <div style={{ \n            fontFamily: 'var(--font-mono)',\n            fontSize: '0.7rem',\n            lineHeight: '1.4'\n          }}>\n            {currText || 'Enter text to see preview...'}\n          </div>\n        </div>\n      </div>\n    </BaseNode>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}